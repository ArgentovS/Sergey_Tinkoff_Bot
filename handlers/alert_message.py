from settings import *
from tools.utils import *


@timeit
# –°–æ–ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def one_message(users, actual_shares, text):
    """
    –°–æ–ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    :return: NoReturn
    """
    async def message_to_bot(user_id, actual_shares, text):
        await actual_shares.bot.send_message(chat_id=user_id, text=text, parse_mode='HTML')

    tasks = [message_to_bot(user_id, actual_shares, text) for user_id in users]
    loop = asyncio.get_event_loop()
    for task in tasks:
        loop.create_task(task)
    logger.info(f'\n            –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')


# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–∑–∫–æ–º —Ä–æ—Å—Ç–µ –æ–±—ä—ë–º–∞
def message_huge_volume(figi, candles, users, actual_shares):

    # –†–∞—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
    time_last = utc3(candles[-1:][0].time).strftime("%H:%M")                 # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏

    price_penultimate = round(candles[-2:-1][0].close.units +          # –¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
                              candles[-2:-1][0].close.nano * 1e-9, 2)
    price_last = round(candles[-1:][0].close.units +                   # –¶–µ–Ω–∞ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
                       candles[-1:][0].close.nano * 1e-9, 2)

    volume_last = candles[-1:][0].volume                               # –û–±—ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏

    # –†–∞—Å—á—ë—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
    if price_penultimate < price_last:
        price_percentage, emoji = f'+{round((price_last - price_penultimate) / price_penultimate * 100, 2)}%', 'üöÄ'
        price_point = f'–†–æ—Å—Ç –Ω–∞ {round((price_last - price_penultimate)/(figi[2].units+figi[2].nano * 1e-9))}–ø'
    elif price_penultimate > price_last:
        price_percentage, emoji = f'{round((price_last - price_penultimate) / price_penultimate * 100, 2)}%', 'üß®'
        price_point = f'–ü–∞–¥–µ–Ω–∏–µ –Ω–∞ {round((price_penultimate - price_last) / (figi[2].units + figi[2].nano * 1e-9))}–ø'
    else:
        price_percentage, emoji = '0%', 'ü•∂'
        price_point = '–¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å'
    volumes_penultimate, volume_avg = list(), 1  # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏—Ö 252 —Å–≤–µ—á–µ–π
    for candle in candles[:-1]:
        volumes_penultimate.append(candle.volume)
    volume_avg = sum(volumes_penultimate) / len(volumes_penultimate)
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f'–≤—Ä–µ–º—è: {time_last}\n' \
           f'üìâ <code>{figi[1]}</code> {price_percentage} {emoji}\n' \
           f'–†–æ—Å—Ç –æ–±—ä—ë–º–∞ –Ω–∞ {round(((volume_last - volume_avg) / volume_avg) * 100)}%\n' \
           f'{price_point} ({price_percentage})\n' \
           f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price_last} ‚ÇΩ\n' \
           f'–û–±—ä—ë–º: {volume_last} '

    return text
